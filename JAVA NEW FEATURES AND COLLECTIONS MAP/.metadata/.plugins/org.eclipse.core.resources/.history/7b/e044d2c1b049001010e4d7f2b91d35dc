package ArrayListExample;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class CopyOnWriteArrayListExample {
	public static void main(String[] args)
	{
		CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();
		
		list.add("aaa");
		list.add("bbbb");
		
		Iterator<String> itr=list.iterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
			list.add("kkk");//here no problem means we can say this is thread safe
		}
		
		System.out.println("After concurrent Modification:"+list);
		
		
		
		
		//we can make the arrayList Thread Safe with help of copyOnWriteArrayList
		ArrayList<String> ar= new ArrayList();
		ar.add("llll");
		ar.add("oooo");
		
		CopyOnWriteArrayList<String> list1 = new CopyOnWriteArrayList<>(ar);
		
		Iterator<String> itrr=list1.iterator();
		
		while(itrr.hasNext())
		{
			System.out.println(itrr.next());
			list1.add("kkk");//here no problem means we can say this is thread safe
		}
		System.out.println("After concurrent Modification:"+list1);

		

		
		
		//we can make ArrayList Thread safe using collection.synchronised
		
		ArrayList<String> arr= new ArrayList();

		List<String> lists=Collections.synchronizedList(null)

	}
}
