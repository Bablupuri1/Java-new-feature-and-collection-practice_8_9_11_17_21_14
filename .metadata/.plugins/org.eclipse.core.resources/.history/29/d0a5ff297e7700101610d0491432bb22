package CommonQuestionAsked;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;


class employee
{
	public String name;
	public double salary;
	public employee(String string, int i) {
		this.name=string;
		this.salary=i;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	@Override
	public String toString() {
		return "employee [name=" + name + ", salary=" + salary + "]";
	}
	
	
	
	
}

public class StringLOngestWord {

	public static void main(String[] args) {

		List<String> word = Arrays.asList("a", "ab", "abc");

		// now find and display longest word in given list of string

		Optional<String> first = word.stream().sorted(Comparator.reverseOrder()).findFirst();

		System.out.println(first);

		// 2nd way use reduce

		String string = word.stream().reduce((w1, w2) -> w1.length() > w2.length() ? w1 : w2).get();

		System.out.println("max length string: use reduce:" + string);

		// 3rd way where we are using Integer.compare

		System.out.println("Sotring descending order");
		word.stream().sorted((w1, w2) -> Integer.compare(w2.length(), w1.length())).forEach(System.out::println);

		System.out.println("Second largest length string");

		Optional<String> first2 = word.stream().sorted((w1, w2) -> Integer.compare(w2.length(), w1.length())).distinct()
				.skip(1).findFirst();

		System.out.println(first2);

		System.out.println("3rd largest string");

		Optional<String> first3 = word.stream().sorted((w1, w2) -> Integer.compare(w2.length(), w1.length())).distinct()
				.skip(2).findFirst();
		System.out.println(first3);
		
		
		
		
		
		//create one employee list and fetch highest salry of employee
		
		ArrayList<employee> list= new ArrayList();
		list.add(new employee("bablu",60000));
		list.add(new employee("Abhi",50000));
		list.add(new employee("Ajay",40000));
		list.add(new employee("Anil",30000));
		list.add(new employee("Prabhash",20000));
		
		
		//first
		Optional<employee> max = list.stream()
				.max(Comparator.comparingDouble(e->e.salary));
		
		System.out.println(max);
		

		
		//now use reduce
		
		Optional<employee> reduce = list.stream().reduce((s1,s2)->s1.salary>s2.salary? s1 : s2);
		
		System.out.println(reduce);
		
		
		
		
		//now use 
		
		Optional<employee> max2 = list.stream()
				.max((s1,s2)->Double.compare(s1.salary, s2.salary));
		
		System.out.println(max2);

	}
}
